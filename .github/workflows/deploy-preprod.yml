name: DÃ©ploiement PrÃ©-production

on:
  push:
    branches: [ prÃ©-prod, preprod ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environnement Ã  dÃ©ployer'
        required: true
        default: 'preprod'
        type: choice
        options:
        - preprod
        - prod

jobs:
  test-and-quality:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: azerty-26
          MYSQL_DATABASE: blog_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, xdebug
          coverage: xdebug
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node dependencies
        run: npm install

      - name: Build assets
        run: npm run build

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress

      - name: Code Quality Checks
        run: |
          vendor/bin/phpcs --standard=PSR12 src/
          vendor/bin/phpmd src/ text .github/phpmd.xml

      - name: Security Check
        uses: symfonycorp/security-checker-action@v3

      - name: Setup Test Database
        run: |
          php bin/console --env=test doctrine:database:drop --if-exists --force
          php bin/console --env=test doctrine:database:create --if-not-exists
          php bin/console --env=test doctrine:schema:create
          php bin/console --env=test doctrine:fixtures:load --no-interaction
        env:
          DATABASE_URL: "mysql://root:azerty-26@127.0.0.1:3306/blog_test?serverVersion=8.0"
          APP_ENV: test

      - name: Run Tests with Coverage
        run: |
          XDEBUG_MODE=XDEBUG_MODE=coverage php bin/phpunit tests/Unit/ --coverage-clover=coverage.xml --testdox
        env:
          DATABASE_URL: "mysql://root:azerty-26@127.0.0.1:3306/blog_test?serverVersion=8.0"
          APP_ENV: test

  deploy-preprod:
    needs: test-and-quality
    if: github.ref == 'refs/heads/pre-prod' || github.ref == 'refs/heads/preprod' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'preprod')
    runs-on: ubuntu-latest
    environment: 
      name: pre-production
      url: http://localhost:8889
    
    steps:
    - uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-preprod-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-preprod-

    - name: Build and push Docker image (preprod)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/pitcrew:preprod
          ${{ secrets.DOCKER_HUB_USERNAME }}/pitcrew:preprod-${{ github.sha }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Deploy to Pre-production Environment
      run: |
        # CrÃ©er le fichier .env.preprod
        cat > .env.preprod << EOL
        APP_ENV=preprod
        APP_SECRET=${{ secrets.APP_SECRET_PREPROD }}
        DATABASE_URL="${{ secrets.DATABASE_URL_PREPROD }}"
        EOL
        
        # Pull des images en parallÃ¨le
        docker compose -f docker-compose.preprod.yml pull -q
        
        # ArrÃªter les conteneurs existants
        docker compose -f docker-compose.preprod.yml down --remove-orphans
        
        # DÃ©marrer les nouveaux conteneurs en arriÃ¨re-plan
        docker compose -f docker-compose.preprod.yml --env-file .env.preprod up -d
        
        # Attendre que la base de donnÃ©es soit prÃªte
        docker compose -f docker-compose.preprod.yml exec -T database mysqladmin ping -h localhost -u root -pazerty-26 --wait=30

        # ExÃ©cuter les migrations et le cache en parallÃ¨le
        docker compose -f docker-compose.preprod.yml exec -T app php bin/console doctrine:migrations:migrate --no-interaction --env=preprod &
        docker compose -f docker-compose.preprod.yml exec -T app php bin/console cache:clear --env=preprod &
        wait

    - name: Health Check (Preprod)
      run: |
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8889/health
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8889/api/health

    - name: Notify Slack (Preprod)
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_MESSAGE: ${{ job.status == 'success' && 'ðŸŸ¡ DÃ©ploiement PREPROD rÃ©ussi' || 'ðŸ”´ Ã‰chec du dÃ©ploiement PREPROD' }}
        SLACK_COLOR: ${{ job.status == 'success' && 'warning' || 'danger' }}
        SLACK_FOOTER: "Commit: ${{ github.sha }} | Branch: ${{ github.ref_name }}" 