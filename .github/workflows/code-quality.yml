name: Code Quality & Cleanup

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Exécuter tous les dimanches à 2h du matin
    - cron: '0 2 * * 0'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: azerty-26
          MYSQL_DATABASE: blog_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, zip, gd
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Install NPM dependencies
      run: npm ci

    - name: Create .env.test
      run: |
        cp .env .env.test
        sed -i 's/DATABASE_URL=.*/DATABASE_URL="mysql:\/\/root:azerty-26@127.0.0.1:3306\/blog_test?serverVersion=8.0"/' .env.test

    - name: Setup database
      run: |
        php bin/console --env=test doctrine:database:drop --if-exists --force
        php bin/console --env=test doctrine:database:create --if-not-exists
        php bin/console --env=test doctrine:schema:create
        php bin/console --env=test doctrine:fixtures:load --no-interaction
      env:
        DATABASE_URL: "mysql://root:azerty-26@127.0.0.1:3306/blog_test?serverVersion=8.0"
        APP_ENV: test

    - name: Run PHPUnit tests
      run: |
        XDEBUG_MODE=coverage php bin/phpunit --coverage-clover=coverage.xml --testdox
      env:
        DATABASE_URL: "mysql://root:azerty-26@127.0.0.1:3306/blog_test?serverVersion=8.0"
        APP_ENV: test

    - name: Run PHPStan analysis
      run: vendor/bin/phpstan analyse src/ --level=8 --no-progress

    - name: Run PHP CS Fixer
      run: vendor/bin/php-cs-fixer fix --dry-run --diff

    - name: Run PHPMD
      run: vendor/bin/phpmd src/ text cleancode,codesize,controversial,design,naming,unusedcode

    - name: Check for unused Composer dependencies
      run: |
        composer require --dev maglnet/composer-unused
        vendor/bin/composer-unused --no-progress

    - name: Check for unused NPM dependencies
      run: npx depcheck --json

    - name: Build assets
      run: npm run build

    - name: Check for duplicate files
      run: |
        echo "Checking for duplicate JS files..."
        if [ -d "public/js" ] && [ -d "assets/js" ]; then
          echo "⚠️ Warning: Both public/js and assets/js directories exist"
          echo "Consider removing public/js if using Vite"
        fi

    - name: Check for orphaned CSS files
      run: |
        echo "Checking for orphaned CSS files..."
        for css_file in public/css/*.css; do
          if [ -f "$css_file" ]; then
            filename=$(basename "$css_file")
            if ! grep -r "$filename" templates/ > /dev/null 2>&1; then
              echo "⚠️ Warning: CSS file $filename might be orphaned"
            fi
          fi
        done

    - name: Check for duplicate migrations
      run: |
        echo "Checking for duplicate migrations..."
        if [ -d "migrations" ]; then
          for migration in migrations/Version*.php; do
            if [ -f "$migration" ]; then
              class_name=$(grep "class" "$migration" | head -1 | sed 's/.*class \([^ ]*\).*/\1/')
              count=$(grep -r "class $class_name" migrations/ | wc -l)
              if [ "$count" -gt 1 ]; then
                echo "⚠️ Warning: Duplicate migration class $class_name found"
              fi
            fi
          done
        fi

    - name: Generate project statistics
      run: |
        echo "📊 Project Statistics:"
        echo "Total files: $(find . -type f -not -path './vendor/*' -not -path './node_modules/*' -not -path './.git/*' | wc -l)"
        echo "PHP files: $(find . -name '*.php' -not -path './vendor/*' | wc -l)"
        echo "JS files: $(find . -name '*.js' -not -path './node_modules/*' | wc -l)"
        echo "CSS files: $(find . -name '*.css' | wc -l)"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress

    - name: Security audit
      run: composer audit

    - name: Check for security vulnerabilities
      run: |
        echo "Checking for common security issues..."
        # Check for hardcoded secrets
        if grep -r "password.*=" src/ --exclude-dir=vendor; then
          echo "⚠️ Warning: Potential hardcoded passwords found"
        fi
        
        # Check for SQL injection patterns
        if grep -r "query.*\$" src/ --exclude-dir=vendor; then
          echo "⚠️ Warning: Potential SQL injection patterns found"
        fi

  cleanup-report:
    runs-on: ubuntu-latest
    needs: [code-quality, security-check]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate cleanup report
      run: |
        echo "🧹 Cleanup Report" > cleanup-report.md
        echo "=================" >> cleanup-report.md
        echo "" >> cleanup-report.md
        echo "Generated on: $(date)" >> cleanup-report.md
        echo "" >> cleanup-report.md
        
        echo "## Files to Review" >> cleanup-report.md
        echo "" >> cleanup-report.md
        
        # Check for orphaned files
        for css_file in public/css/*.css; do
          if [ -f "$css_file" ]; then
            filename=$(basename "$css_file")
            if ! grep -r "$filename" templates/ > /dev/null 2>&1; then
              echo "- CSS file: $css_file (potentially orphaned)" >> cleanup-report.md
            fi
          fi
        done
        
        echo "" >> cleanup-report.md
        echo "## Recommendations" >> cleanup-report.md
        echo "" >> cleanup-report.md
        echo "1. Review orphaned files before deletion" >> cleanup-report.md
        echo "2. Run cleanup scripts locally for detailed analysis" >> cleanup-report.md
        echo "3. Consider removing unused dependencies" >> cleanup-report.md

    - name: Upload cleanup report
      uses: actions/upload-artifact@v3
      with:
        name: cleanup-report
        path: cleanup-report.md 