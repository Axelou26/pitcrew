name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json
          
      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json
          coverage: none
          
      - name: Install PHP_CodeSniffer
        run: |
          composer require --dev squizlabs/php_codesniffer
          
      - name: Check PHP Code Style
        run: |
          vendor/bin/phpcs --standard=PSR12 src/
          
      - name: PHP Mess Detector
        run: |
          composer require --dev phpmd/phpmd
          vendor/bin/phpmd src/ text cleancode,codesize,controversial,design,naming,unusedcode
          
      - name: PHP Copy/Paste Detector
        run: |
          composer require --dev sebastian/phpcpd
          vendor/bin/phpcpd src/

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # PHP Setup
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json

      - name: Install PHP Dependencies
        run: composer install --no-progress

      # Node.js Setup
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node.js Dependencies
        run: |
          npm ci
        working-directory: ${{ github.workspace }}

      # Security Checks
      - name: PHP Security Check
        uses: symfonycorp/security-checker-action@v4
        id: security-check
        continue-on-error: true

      # Snyk Analysis
      - name: Run Snyk PHP Analysis
        uses: snyk/actions/php@master
        id: snyk-php
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --all-projects --package-manager=composer

      - name: Run Snyk Node.js Analysis
        uses: snyk/actions/node@master
        id: snyk-node
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      # Reports Upload
      - name: Upload Snyk PHP Report
        uses: github/codeql-action/upload-sarif@v2
        if: always() && steps.snyk-php.outcome == 'success'
        with:
          sarif_file: snyk.sarif
          category: snyk-php

      - name: Upload Snyk Node.js Report
        uses: github/codeql-action/upload-sarif@v2
        if: always() && steps.snyk-node.outcome == 'success'
        with:
          sarif_file: snyk.sarif
          category: snyk-node

      # OWASP Check
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'PitCrew'
          path: '.'
          format: 'HTML'
          args: >
            --suppression suppression.xml
            --failOnCVSS 7
            --enableRetired

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Security Reports
          path: |
            reports
            snyk.sarif
          retention-days: 30

      # Status Check
      - name: Check Security Status
        if: always()
        run: |
          SECURITY_ISSUES=0
          
          if [ "${{ steps.security-check.outcome }}" == "failure" ]; then
            echo "‚ö†Ô∏è PHP Security Check failed"
            SECURITY_ISSUES=$((SECURITY_ISSUES+1))
          fi
          
          if [ "${{ steps.snyk-php.outcome }}" == "failure" ]; then
            echo "‚ö†Ô∏è Snyk PHP Analysis found high severity issues"
            SECURITY_ISSUES=$((SECURITY_ISSUES+1))
          fi
          
          if [ "${{ steps.snyk-node.outcome }}" == "failure" ]; then
            echo "‚ö†Ô∏è Snyk Node.js Analysis found high severity issues"
            SECURITY_ISSUES=$((SECURITY_ISSUES+1))
          fi
          
          if [ $SECURITY_ISSUES -gt 0 ]; then
            echo "üö® Found $SECURITY_ISSUES security issue(s)"
            echo "Please check the security reports for details"
            # Uncomment the line below to make the workflow fail on security issues
            # exit 1
          else
            echo "‚úÖ No critical security issues found"
          fi

  tests:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: blog_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json
          coverage: xdebug
          
      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
          
      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress
        
      - name: Setup Test Database
        run: |
          php bin/console --env=test doctrine:database:create --if-not-exists
          php bin/console --env=test doctrine:schema:update --force
          php bin/console --env=test doctrine:fixtures:load --no-interaction
        env:
          DATABASE_URL: "mysql://root:root@127.0.0.1:3306/blog_test?serverVersion=8.0"
          
      - name: Run Tests
        run: |
          php bin/phpunit --coverage-clover clover.xml
          
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test Coverage Reports
          path: clover.xml
          retention-days: 30

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Run Performance Tests
        run: k6 run tests/Performance/load-test.js

  deploy:
    name: Deploy to Production
    needs: [quality, security, tests, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://127.0.0.1:8000/
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          
      - name: Install Production Dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          composer dump-env prod
        env:
          APP_ENV: prod
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Build Assets
        run: |
          npm ci
          npm run build
          
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /var/www/pitcrew
            git pull origin main
            composer install --no-dev --optimize-autoloader
            php bin/console cache:clear --env=prod
            php bin/console doctrine:migrations:migrate --no-interaction --env=prod
            npm ci
            npm run build
            php bin/console cache:warmup --env=prod
            sudo systemctl reload php8.2-fpm
            
      - name: Run Smoke Tests
        run: |
          curl --fail ${{ secrets.PRODUCTION_URL }}/health
          curl --fail ${{ secrets.PRODUCTION_URL }}/api/health
          
      - name: Notify Slack
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: ${{ job.status == 'success' && 'üöÄ D√©ploiement r√©ussi sur la production' || '‚ùå √âchec du d√©ploiement en production' }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_FOOTER: "Commit: ${{ github.sha }}" 