{% extends 'base.html.twig' %}

{% block title %}Messagerie{% endblock %}

{% block body %}
<div class="container py-4">
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="h5 mb-0">Conversations</h3>
                    <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#newConversationModal">
                        <i class="bi bi-plus-lg"></i> Nouvelle conversation
                    </button>
                </div>
                <div class="list-group list-group-flush" id="conversations-list">
                    {% if conversations is empty %}
                        <div class="list-group-item text-center text-muted py-4">
                            <i class="bi bi-chat-dots display-4 mb-2"></i>
                            <p class="mb-0">Aucune conversation pour le moment</p>
                        </div>
                    {% else %}
                        {% for conversation in conversations %}
                            {% set otherParticipant = conversation.getOtherParticipant(app.user) %}
                            <a href="{{ path('app_message_conversation', {'id': conversation.id}) }}" 
                               class="list-group-item list-group-item-action {% if conversation.hasUnreadMessages(app.user) %}fw-bold{% endif %}">
                                <div class="d-flex align-items-center">
                                    {% if otherParticipant.profilePicture %}
                                        <img src="{{ asset('uploads/profile_pictures/' ~ otherParticipant.profilePicture) }}" 
                                             alt="{{ otherParticipant.fullName }}"
                                             class="rounded-circle me-2"
                                             style="width: 48px; height: 48px; object-fit: cover;">
                                    {% else %}
                                        <div class="bg-light rounded-circle d-flex align-items-center justify-content-center me-2"
                                             style="width: 48px; height: 48px;">
                                            <i class="bi bi-person text-muted"></i>
                                        </div>
                                    {% endif %}
                                    <div class="flex-grow-1 min-width-0">
                                        <div class="d-flex justify-content-between align-items-center mb-1">
                                            <h6 class="mb-0 text-truncate">{{ otherParticipant.fullName }}</h6>
                                            <small class="text-muted ms-2">{{ conversation.lastMessageAt|ago }}</small>
                                        </div>
                                        {% if conversation.lastMessage %}
                                            <p class="mb-0 text-muted text-truncate">
                                                {% if conversation.lastMessage.sender == app.user %}
                                                    <i class="bi bi-reply me-1"></i>
                                                {% endif %}
                                                {{ conversation.lastMessage.content }}
                                            </p>
                                        {% endif %}
                                    </div>
                                </div>
                            </a>
                        {% endfor %}
                    {% endif %}
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card">
                <div class="card-body text-center text-muted py-5">
                    <i class="bi bi-chat-text display-4 mb-3"></i>
                    <h4>Sélectionnez une conversation</h4>
                    <p class="mb-0">Ou démarrez une nouvelle conversation en cliquant sur le bouton "Nouvelle conversation"</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Nouvelle Conversation -->
<div class="modal fade" id="newConversationModal" tabindex="-1" aria-labelledby="newConversationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="newConversationModalLabel">Nouvelle conversation</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
            </div>
            <div class="modal-body">
                <form id="new-conversation-form" action="{{ path('app_message_new_conversation') }}" method="post">
                    <div class="mb-3">
                        <label for="recipient" class="form-label">Destinataire</label>
                        <select class="form-select" id="recipient" name="recipient" required>
                            <option value="">Sélectionnez un destinataire...</option>
                            <!-- Les destinataires seront chargés via AJAX -->
                        </select>
                        <div class="form-text text-muted">
                            Seuls vos amis sont disponibles comme destinataires.
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="message" class="form-label">Premier message</label>
                        <textarea class="form-control" id="message" name="message" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="submit" form="new-conversation-form" class="btn btn-primary">Envoyer</button>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        const ConversationManager = {
            updateInterval: 30000,
            lastUpdate: 0,
            isLoading: false,

            init() {
                this.setupAutoUpdate();
            },

            async updateConversationsList() {
                if (this.isLoading || document.hidden) return;

                try {
                    this.isLoading = true;
                    const response = await fetch('{{ path('app_message_index') }}', {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'Cache-Control': 'no-cache'
                        }
                    });

                    if (!response.ok) throw new Error('Erreur réseau');

                    const html = await response.text();
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newList = doc.getElementById('conversations-list');
                    
                    if (newList) {
                        document.getElementById('conversations-list').innerHTML = newList.innerHTML;
                    }

                    this.lastUpdate = Date.now();
                } catch (error) {
                    console.error('Erreur lors de la mise à jour des conversations:', error);
                } finally {
                    this.isLoading = false;
                }
            },

            setupAutoUpdate() {
                // Mettre à jour périodiquement uniquement si l'onglet est actif
                setInterval(() => {
                    if (!document.hidden && Date.now() - this.lastUpdate >= this.updateInterval) {
                        this.updateConversationsList();
                    }
                }, this.updateInterval);

                // Mettre à jour lors du retour sur l'onglet
                document.addEventListener('visibilitychange', () => {
                    if (!document.hidden && Date.now() - this.lastUpdate >= this.updateInterval) {
                        this.updateConversationsList();
                    }
                });
            }
        };

        document.addEventListener('DOMContentLoaded', () => ConversationManager.init());
    </script>
{% endblock %} 