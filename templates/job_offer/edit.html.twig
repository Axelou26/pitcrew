{% extends 'base.html.twig' %}

{% block title %}Modifier l'offre d'emploi{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .job-offer-form {
            background-color: #fff;
            border-radius: 12px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
        }
        
        .job-offer-form:hover {
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.12);
        }
        
        .form-section {
            border-bottom: 1px solid #eaeaea;
            padding: 1.5rem 0;
            margin-bottom: 1rem;
        }
        
        .form-section-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #dc3545;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        .form-section-title i {
            color: #dc3545;
        }
        
        .collection-item {
            position: relative;
            padding: 0.75rem 1rem;
            border-radius: 8px;
            background-color: #f8f9fa;
            margin-bottom: 0.5rem;
            border-left: 3px solid #dc3545;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .collection-item:hover {
            background-color: rgba(13, 110, 253, 0.08);
            transform: translateX(3px);
        }
        
        .collection-item .remove-item {
            cursor: pointer;
            opacity: 0.7;
            transition: all 0.2s ease;
            background: none;
            border: none;
            font-size: 1.2rem;
            color: #6c757d;
            padding: 0;
            width: 28px;
            height: 28px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }
        
        .collection-item .remove-item:hover {
            opacity: 1;
            color: #dc3545;
            background-color: rgba(220, 53, 69, 0.1);
        }
        
        .skill-tag {
            display: inline-flex;
            align-items: center;
            padding: 0.35rem 0.75rem;
            margin: 0.25rem;
            border-radius: 50px;
            font-size: 0.85rem;
            font-weight: 500;
            background-color: rgba(13, 110, 253, 0.1);
            color: #0d6efd;
            transition: all 0.2s ease;
        }
        
        .skill-tag i {
            margin-right: 0.35rem;
            font-size: 0.75rem;
        }
        
        .skill-tag .remove-tag {
            margin-left: 0.5rem;
            cursor: pointer;
            opacity: 0.7;
        }
        
        .skill-tag .remove-tag:hover {
            opacity: 1;
        }
        
        .form-label {
            font-weight: 600;
            margin-bottom: 0.75rem;
            color: #344767;
        }
        
        .form-hint {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 0.35rem;
        }
        
        .ck-editor__editable {
            min-height: 250px;
            border-radius: 8px !important;
        }
        
        .btn-add-skill {
            background-color: rgba(13, 110, 253, 0.1);
            border: 1px solid rgba(13, 110, 253, 0.3);
            color: #0d6efd;
            font-weight: 500;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            transition: all 0.2s ease;
        }
        
        .btn-add-skill:hover {
            background-color: #0d6efd;
            border-color: #0d6efd;
            color: #fff;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(13, 110, 253, 0.15);
        }
        
        .skills-input-container {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        
        .skills-container {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 1rem;
            min-height: 60px;
            border: 1px solid #eaeaea;
        }
        
        .status-card {
            border-left: 4px solid #17a2b8;
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 1rem;
        }
        
        .badge-active {
            background-color: #198754;
            color: white;
            padding: 0.35rem 0.75rem;
            border-radius: 50px;
            font-weight: 500;
            font-size: 0.85rem;
        }
        
        .badge-inactive {
            background-color: #dc3545;
            color: white;
            padding: 0.35rem 0.75rem;
            border-radius: 50px;
            font-weight: 500;
            font-size: 0.85rem;
        }
        
        .btn-activate {
            background-color: #198754;
            border-color: #198754;
            color: white;
            transition: all 0.2s ease;
        }
        
        .btn-activate:hover {
            background-color: #157347;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(25, 135, 84, 0.15);
        }
        
        .btn-deactivate {
            background-color: #ffc107;
            border-color: #ffc107;
            color: #212529;
            transition: all 0.2s ease;
        }
        
        .btn-deactivate:hover {
            background-color: #ffca2c;
            transform: translateY(-2px);
            box-shadow: 0 4px 10px rgba(255, 193, 7, 0.15);
        }
        
        .file-upload-container {
            position: relative;
            padding: 2rem;
            border: 2px dashed #dee2e6;
            border-radius: 12px;
            background-color: #f8f9fa;
            text-align: center;
            margin-bottom: 1.5rem;
            transition: all 0.3s ease;
            cursor: pointer;
            overflow: hidden;
        }
        
        .file-upload-container:hover {
            border-color: #0d6efd;
            background-color: rgba(13, 110, 253, 0.03);
        }
        
        .file-upload-container i {
            font-size: 2rem;
            color: #0d6efd;
            margin-bottom: 0.75rem;
        }
        
        .file-input {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }
        
        .file-preview {
            max-width: 100%;
            max-height: 150px;
            margin-top: 1rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            display: none;
            transition: all 0.3s ease;
        }
        
        .file-preview:hover {
            transform: scale(1.02);
        }
        
        .form-control {
            padding: 0.75rem 1rem;
            border-radius: 8px;
            border: 1px solid #eaeaea;
            transition: all 0.2s ease;
        }
        
        .form-control:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
        
        .btn-primary {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(13, 110, 253, 0.2);
        }
        
        .btn-outline-secondary {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        
        .btn-outline-secondary:hover {
            transform: translateY(-2px);
        }
        
        .job-offer-card-header {
            background: linear-gradient(45deg, #dc3545, #c82333);
            color: white;
            border-radius: 10px 10px 0 0;
            padding: 1.5rem 2rem;
        }
        
        .job-offer-card-footer {
            background-color: #f8f9fa;
            border-radius: 0 0 10px 10px;
            padding: 1.5rem 2rem;
        }
        
        /* Animation des éléments */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .animated-item {
            animation: fadeIn 0.3s ease forwards;
        }
    </style>
{% endblock %}

{% block body %}
<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="{{ path('app_home') }}">Accueil</a></li>
                    <li class="breadcrumb-item"><a href="{{ path('app_job_offer_index') }}">Offres d'emploi</a></li>
                    <li class="breadcrumb-item"><a href="{{ path('app_job_offer_show', {'offerId': jobOffer.id}) }}">{{ jobOffer.title }}</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Modifier</li>
                </ol>
            </nav>
            <div class="d-flex align-items-center mb-4">
                {% if jobOffer.logoUrl %}
                    <div class="me-4">
                        <img src="{{ jobOffer.logoUrl }}" alt="{{ jobOffer.company }}" class="rounded" width="80">
                    </div>
                {% endif %}
                <div>
                    <h1 class="h2 mb-1">Modifier "{{ jobOffer.title }}"</h1>
                    <div class="text-muted">
                        <i class="fas fa-building me-1"></i> {{ jobOffer.company }} &middot;
                        <i class="fas fa-map-marker-alt me-1"></i> {{ jobOffer.location }}
                        {% if jobOffer.isRemote %}
                            &middot; <i class="fas fa-home me-1"></i> Télétravail possible
                        {% endif %}
                    </div>
                </div>
            </div>

            <div class="card shadow-sm job-offer-form">
                <div class="job-offer-card-header">
                    <h2 class="h3 mb-1">Modifier votre offre d'emploi</h2>
                    <p class="mb-0 opacity-75">Complétez tous les champs pour une offre optimale</p>
                </div>
                
                {{ form_start(form, {'attr': {'class': 'needs-validation'}}) }}
                <div class="card-body p-4">
                    <div class="form-section">
                        <h3 class="form-section-title"><i class="fas fa-briefcase"></i> Informations générales</h3>
                        <div class="row">
                            <div class="col-md-8">
                                <div class="mb-3">
                                    {{ form_label(form.title) }}
                                    {{ form_widget(form.title, {'attr': {'class': 'form-control'}}) }}
                                    <div class="form-hint">Un titre clair et précis attire plus de candidats qualifiés</div>
                                    {{ form_errors(form.title) }}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    {{ form_label(form.company) }}
                                    {{ form_widget(form.company, {'attr': {'class': 'form-control'}}) }}
                                    {{ form_errors(form.company) }}
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    {{ form_label(form.location) }}
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-map-marker-alt"></i></span>
                                        {{ form_widget(form.location, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    {{ form_errors(form.location) }}
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="mb-3">
                                    {{ form_label(form.contractType) }}
                                    {{ form_widget(form.contractType, {'attr': {'class': 'form-select'}}) }}
                                    {{ form_errors(form.contractType) }}
                                </div>
                            </div>
                            <div class="col-md-2">
                                <div class="mb-3 d-flex align-items-end h-100">
                                    {{ form_widget(form.isRemote, {'attr': {'class': 'form-check-input me-2'}}) }}
                                    {{ form_label(form.isRemote, null, {'label_attr': {'class': 'form-check-label'}}) }}
                                    {{ form_errors(form.isRemote) }}
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-section">
                        <h3 class="form-section-title"><i class="fas fa-file-alt"></i> Description du poste</h3>
                        <div class="mb-4">
                            {{ form_label(form.description) }}
                            {{ form_widget(form.description, {'attr': {'class': 'form-control wysiwyg-editor'}}) }}
                            <div class="form-hint">Décrivez de manière détaillée les missions, responsabilités et exigences du poste</div>
                            {{ form_errors(form.description) }}
                        </div>
                    </div>
                    
                    <div class="form-section">
                        <h3 class="form-section-title"><i class="fas fa-tools"></i> Compétences et expérience</h3>
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    {{ form_label(form.experienceLevel) }}
                                    {{ form_widget(form.experienceLevel, {'attr': {'class': 'form-select'}}) }}
                                    {{ form_errors(form.experienceLevel) }}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    {{ form_label(form.salary) }}
                                    <div class="input-group">
                                        {{ form_widget(form.salary, {'attr': {'class': 'form-control'}}) }}
                                        <span class="input-group-text">€/an</span>
                                    </div>
                                    {{ form_errors(form.salary) }}
                                </div>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-4">
                                    <label class="form-label">Compétences techniques requises</label>
                                    <div class="skills-input-container">
                                        <input type="text" id="skill-input" class="form-control" placeholder="Ajouter une compétence...">
                                        <button type="button" id="add-skill" class="btn btn-add-skill"><i class="fas fa-plus me-1"></i> Ajouter</button>
                                    </div>
                                    <div class="skills-container" id="skills-container">
                                        {% if jobOffer.requiredSkills is defined and jobOffer.requiredSkills|length > 0 %}
                                            {% for skill in jobOffer.requiredSkills %}
                                                <span class="skill-tag animated-item">
                                                    <i class="fas fa-code"></i>{{ skill }}
                                                    <span class="remove-tag" data-skill="{{ skill }}"><i class="fas fa-times"></i></span>
                                                </span>
                                            {% endfor %}
                                        {% endif %}
                                    </div>
                                    
                                    {# Champ caché pour stocker les compétences #}
                                    <div id="requiredSkills-fields-list" class="d-none" 
                                         data-prototype="{{ form_widget(form.requiredSkills.vars.prototype)|e }}"
                                         data-widget-tags="{{ '<div class="collection-item"></div>'|e }}">
                                        {% for skillField in form.requiredSkills %}
                                            <div class="collection-item">
                                                {{ form_widget(skillField) }}
                                            </div>
                                        {% endfor %}
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="mb-4">
                                    <label class="form-label">Compétences non-techniques (soft skills)</label>
                                    <div class="skills-input-container">
                                        <input type="text" id="soft-skill-input" class="form-control" placeholder="Ajouter une soft skill...">
                                        <button type="button" id="add-soft-skill" class="btn btn-add-skill"><i class="fas fa-plus me-1"></i> Ajouter</button>
                                    </div>
                                    <div class="skills-container" id="soft-skills-container">
                                        {% if jobOffer.softSkills is defined and jobOffer.softSkills|length > 0 %}
                                            {% for skill in jobOffer.softSkills %}
                                                <span class="skill-tag animated-item" style="background-color: rgba(102, 16, 242, 0.1); color: #6610f2;">
                                                    <i class="fas fa-user-friends"></i>{{ skill }}
                                                    <span class="remove-tag" data-soft-skill="{{ skill }}"><i class="fas fa-times"></i></span>
                                                </span>
                                            {% endfor %}
                                        {% endif %}
                                    </div>
                                    
                                    {# Champ caché pour les soft skills #}
                                    <input type="hidden" id="softSkillsInput" name="softSkills" value="{{ jobOffer.softSkills|join(',') }}">
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-section">
                        <h3 class="form-section-title"><i class="fas fa-image"></i> Médias</h3>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="{{ form.logoFile.vars.id }}" class="form-label">Logo de l'entreprise</label>
                                    <div class="file-upload-container">
                                        <i class="fas fa-cloud-upload-alt"></i>
                                        <p class="mb-0">Glissez votre logo ici ou cliquez pour sélectionner</p>
                                        <p class="text-muted small mt-1">Formats acceptés : JPG, PNG, SVG (max 2MB)</p>
                                        {{ form_widget(form.logoFile, {'attr': {'class': 'file-input'}}) }}
                                        {% if jobOffer.logoUrl %}
                                            <img src="{{ jobOffer.logoUrl }}" alt="Logo actuel" id="logoPreview" class="file-preview mt-3" style="display: block;">
                                        {% else %}
                                            <img src="" alt="" id="logoPreview" class="file-preview">
                                        {% endif %}
                                    </div>
                                    {{ form_errors(form.logoFile) }}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label for="{{ form.image.vars.id }}" class="form-label">Image de l'offre</label>
                                    <div class="file-upload-container">
                                        <i class="fas fa-images"></i>
                                        <p class="mb-0">Glissez une image ici ou cliquez pour sélectionner</p>
                                        <p class="text-muted small mt-1">Formats acceptés : JPG, PNG, GIF (max 5MB)</p>
                                        {{ form_widget(form.image, {'attr': {'class': 'file-input'}}) }}
                                        <img src="" alt="" id="imagePreview" class="file-preview">
                                    </div>
                                    {{ form_errors(form.image) }}
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-section">
                        <h3 class="form-section-title"><i class="fas fa-info-circle"></i> Informations complémentaires</h3>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    {{ form_label(form.contactEmail) }}
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                                        {{ form_widget(form.contactEmail, {'attr': {'class': 'form-control'}}) }}
                                    </div>
                                    {{ form_errors(form.contactEmail) }}
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    {{ form_label(form.expiresAt) }}
                                    {{ form_widget(form.expiresAt, {'attr': {'class': 'form-control'}}) }}
                                    {{ form_errors(form.expiresAt) }}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="job-offer-card-footer">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="activeSwitch" 
                                           {% if jobOffer.isActive %}checked{% endif %}>
                                    <label class="form-check-label" for="activeSwitch">
                                        <span class="badge {% if jobOffer.isActive %}badge-active{% else %}badge-inactive{% endif %} ms-2">
                                            {% if jobOffer.isActive %}
                                                <i class="fas fa-check-circle me-1"></i>Active
                                            {% else %}
                                                <i class="fas fa-times-circle me-1"></i>Inactive
                                            {% endif %}
                                        </span>
                                    </label>
                                </div>
                            </div>
                            <div class="text-muted mt-2 small">
                                <i class="fas fa-calendar-alt me-1 text-primary"></i> Publiée le {{ jobOffer.createdAt|date('d/m/Y') }}
                                {% if jobOffer.expiresAt %}
                                    <br>
                                    <i class="fas fa-hourglass-end me-1 text-warning"></i> Expire le {{ jobOffer.expiresAt|date('d/m/Y') }}
                                {% endif %}
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex justify-content-end gap-3">
                                <a href="{{ path('app_job_offer_show', {'offerId': jobOffer.id}) }}" class="btn btn-outline-secondary">
                                    <i class="fas fa-arrow-left me-2"></i>Annuler
                                </a>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save me-2"></i>Enregistrer les modifications
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        // Prévisualisation des fichiers
        function previewFile(input, previewId) {
            const preview = document.getElementById(previewId);
            const file = input.files[0];
            const reader = new FileReader();

            reader.onloadend = function () {
                preview.src = reader.result;
                preview.style.display = 'block';
            }

            if (file) {
                reader.readAsDataURL(file);
            } else {
                preview.src = '';
                preview.style.display = 'none';
            }
        }

        // Gestion des compétences techniques requises
        function initializeSkillsManager() {
            let skillsArray = [];
            const skillsContainer = document.getElementById('skills-container');
            const skillInput = document.getElementById('skill-input');
            const addSkillButton = document.getElementById('add-skill');
            const requiredSkillsFieldsList = document.getElementById('requiredSkills-fields-list');
            const formPrototype = requiredSkillsFieldsList ? requiredSkillsFieldsList.dataset.prototype : null;
            
            // Récupérer les compétences existantes
            document.querySelectorAll('#skills-container .skill-tag').forEach(tag => {
                const skillText = tag.textContent.trim();
                if (skillText && !skillsArray.includes(skillText)) {
                    skillsArray.push(skillText);
                }
            });
            
            function updateRequiredSkillsFields() {
                // Vider le conteneur de champs
                while (requiredSkillsFieldsList.firstChild) {
                    requiredSkillsFieldsList.removeChild(requiredSkillsFieldsList.firstChild);
                }
                
                // Recréer les champs à partir du tableau de compétences
                skillsArray.forEach((skill, index) => {
                    const newField = formPrototype.replace(/__name__/g, index);
                    const fieldContainer = document.createElement('div');
                    fieldContainer.className = 'collection-item';
                    fieldContainer.innerHTML = newField;
                    requiredSkillsFieldsList.appendChild(fieldContainer);
                    fieldContainer.querySelector('input').value = skill;
                });
            }
            
            function addSkill(skill) {
                if (!skill || skillsArray.includes(skill)) return;
                
                skillsArray.push(skill);
                
                const skillTag = document.createElement('span');
                skillTag.className = 'skill-tag animated-item';
                skillTag.innerHTML = `<i class="fas fa-code"></i>${skill}<span class="remove-tag" data-skill="${skill}"><i class="fas fa-times"></i></span>`;
                skillsContainer.appendChild(skillTag);
                
                // Ajouter le gestionnaire d'événements pour supprimer la compétence
                const removeButton = skillTag.querySelector('.remove-tag');
                removeButton.addEventListener('click', function() {
                    const skillToRemove = this.dataset.skill;
                    skillsArray = skillsArray.filter(s => s !== skillToRemove);
                    skillTag.remove();
                    updateRequiredSkillsFields();
                });
                
                updateRequiredSkillsFields();
            }
            
            // Gestionnaire pour le bouton Ajouter
            if (addSkillButton) {
                addSkillButton.addEventListener('click', function() {
                    const skill = skillInput.value.trim();
                    if (skill) {
                        addSkill(skill);
                        skillInput.value = '';
                        skillInput.focus();
                    }
                });
            }
            
            // Gestionnaire pour la touche Entrée dans le champ de saisie
            if (skillInput) {
                skillInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        const skill = this.value.trim();
                        if (skill) {
                            addSkill(skill);
                            this.value = '';
                        }
                    }
                });
            }
            
            // Ajouter les gestionnaires d'événements pour les boutons de suppression existants
            document.querySelectorAll('#skills-container .remove-tag').forEach(button => {
                button.addEventListener('click', function() {
                    const skillToRemove = this.dataset.skill;
                    skillsArray = skillsArray.filter(s => s !== skillToRemove);
                    this.closest('.skill-tag').remove();
                    updateRequiredSkillsFields();
                });
            });
            
            // Initialiser les champs cachés avec les valeurs existantes
            updateRequiredSkillsFields();
        }
        
        // Gestion des soft skills
        function initializeSoftSkillsManager() {
            let softSkillsArray = [];
            const softSkillsContainer = document.getElementById('soft-skills-container');
            const softSkillInput = document.getElementById('soft-skill-input');
            const addSoftSkillButton = document.getElementById('add-soft-skill');
            const softSkillsHiddenInput = document.getElementById('softSkillsInput');
            
            // Récupérer les soft skills existantes
            if (softSkillsHiddenInput && softSkillsHiddenInput.value) {
                softSkillsArray = softSkillsHiddenInput.value.split(',').filter(Boolean);
            }
            
            function updateSoftSkillsHiddenInput() {
                if (softSkillsHiddenInput) {
                    softSkillsHiddenInput.value = softSkillsArray.join(',');
                }
            }
            
            function addSoftSkill(skill) {
                if (!skill || softSkillsArray.includes(skill)) return;
                
                softSkillsArray.push(skill);
                
                const skillTag = document.createElement('span');
                skillTag.className = 'skill-tag animated-item';
                skillTag.style.backgroundColor = 'rgba(102, 16, 242, 0.1)';
                skillTag.style.color = '#6610f2';
                skillTag.innerHTML = `<i class="fas fa-user-friends"></i>${skill}<span class="remove-tag" data-soft-skill="${skill}"><i class="fas fa-times"></i></span>`;
                softSkillsContainer.appendChild(skillTag);
                
                // Ajouter le gestionnaire d'événements pour supprimer la compétence
                const removeButton = skillTag.querySelector('.remove-tag');
                removeButton.addEventListener('click', function() {
                    const skillToRemove = this.dataset.softSkill;
                    softSkillsArray = softSkillsArray.filter(s => s !== skillToRemove);
                    skillTag.remove();
                    updateSoftSkillsHiddenInput();
                });
                
                updateSoftSkillsHiddenInput();
            }
            
            // Gestionnaire pour le bouton Ajouter
            if (addSoftSkillButton) {
                addSoftSkillButton.addEventListener('click', function() {
                    const skill = softSkillInput.value.trim();
                    if (skill) {
                        addSoftSkill(skill);
                        softSkillInput.value = '';
                        softSkillInput.focus();
                    }
                });
            }
            
            // Gestionnaire pour la touche Entrée dans le champ de saisie
            if (softSkillInput) {
                softSkillInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        const skill = this.value.trim();
                        if (skill) {
                            addSoftSkill(skill);
                            this.value = '';
                        }
                    }
                });
            }
            
            // Ajouter les gestionnaires d'événements pour les boutons de suppression existants
            document.querySelectorAll('#soft-skills-container .remove-tag').forEach(button => {
                button.addEventListener('click', function() {
                    const skillToRemove = this.dataset.softSkill;
                    softSkillsArray = softSkillsArray.filter(s => s !== skillToRemove);
                    this.closest('.skill-tag').remove();
                    updateSoftSkillsHiddenInput();
                });
            });
            
            // Initialiser le champ caché avec les valeurs existantes
            updateSoftSkillsHiddenInput();
        }
        
        // Gestion de l'état actif/inactif de l'offre
        function initializeActiveToggle() {
            const activeSwitch = document.getElementById('activeSwitch');
            
            if (activeSwitch) {
                activeSwitch.addEventListener('change', function() {
                    const badge = this.closest('.form-check').querySelector('.badge');
                    if (this.checked) {
                        badge.textContent = ' Active';
                        badge.innerHTML = '<i class="fas fa-check-circle me-1"></i>Active';
                        badge.classList.remove('badge-inactive');
                        badge.classList.add('badge-active');
                        
                        // Ajouter un champ caché pour indiquer que l'offre est active
                        let hiddenInput = document.getElementById('jobOffer_isActive');
                        if (!hiddenInput) {
                            hiddenInput = document.createElement('input');
                            hiddenInput.type = 'hidden';
                            hiddenInput.id = 'jobOffer_isActive';
                            hiddenInput.name = 'jobOffer[isActive]';
                            this.closest('form').appendChild(hiddenInput);
                        }
                        hiddenInput.value = '1';
                    } else {
                        badge.textContent = ' Inactive';
                        badge.innerHTML = '<i class="fas fa-times-circle me-1"></i>Inactive';
                        badge.classList.remove('badge-active');
                        badge.classList.add('badge-inactive');
                        
                        // Ajouter un champ caché pour indiquer que l'offre est inactive
                        let hiddenInput = document.getElementById('jobOffer_isActive');
                        if (!hiddenInput) {
                            hiddenInput = document.createElement('input');
                            hiddenInput.type = 'hidden';
                            hiddenInput.id = 'jobOffer_isActive';
                            hiddenInput.name = 'jobOffer[isActive]';
                            this.closest('form').appendChild(hiddenInput);
                        }
                        hiddenInput.value = '0';
                    }
                });
            }
        }

        // Initialisation au chargement de la page
        document.addEventListener('DOMContentLoaded', function() {
            // Prévisualisations des fichiers
            const logoInput = document.querySelector('input[type="file"][name$="[logoFile]"]');
            const imageInput = document.querySelector('input[type="file"][name$="[imageFile]"]');

            if (logoInput) {
                logoInput.addEventListener('change', function() {
                    previewFile(this, 'logoPreview');
                });
            }

            if (imageInput) {
                imageInput.addEventListener('change', function() {
                    previewFile(this, 'imagePreview');
                });
            }
            
            // Initialiser les gestionnaires de compétences
            initializeSkillsManager();
            initializeSoftSkillsManager();
            initializeActiveToggle();
            
            // Animations d'entrée des sections
            const sections = document.querySelectorAll('.form-section');
            sections.forEach((section, index) => {
                section.style.opacity = '0';
                section.style.transform = 'translateY(20px)';
                section.style.transition = 'all 0.3s ease';
                
                setTimeout(() => {
                    section.style.opacity = '1';
                    section.style.transform = 'translateY(0)';
                }, 100 * index);
            });
        });
    </script>
{% endblock %} 